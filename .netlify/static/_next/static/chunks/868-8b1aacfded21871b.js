"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[868],{40868:(e,t,o)=>{o.d(t,{DailyLogsProvider:()=>c,U:()=>s});var r=o(95155),a=o(12115),n=o(31886),l=o(38543);let d=(0,a.createContext)(void 0);function c(e){let{children:t}=e,[o,c]=(0,a.useState)([]),[s,i]=(0,a.useState)([]),[g,u]=(0,a.useState)(!0),[_,m]=(0,a.useState)(null);(0,a.useEffect)(()=>{(async()=>{u(!0),m(null);try{console.log("Starting to fetch logs...");let t=[],o=[];try{let e=await n.mC.getAll();console.log("Raw client logs response:",e),t=(e.data||[]).map(e=>{console.log("Processing client log data:",e);let t=0,o=e.entries||[];if(console.log("Client log entries in useEffect:",o),console.log("Original entries count:",o.length),console.log("Log entries_count from API:",e.entries_count),0===o.length&&(e.entries_count>0||e.total_entries>0)){console.log("Entries array is empty but count indicates clients exist - creating placeholders");let t=e.entries_count||e.total_entries||0;o=Array.from({length:t},(t,o)=>({id:"placeholder-".concat(e.id,"-").concat(o),client_id:"unknown-".concat(o),client_name:"Unknown Client",client_email:"",added_at:new Date,notes:"Client data not fully loaded"}))}let r=o.map(e=>{console.log("Processing client entry in useEffect:",e),t++;let o=e.client_name||"".concat(e.first_name||""," ").concat(e.last_name||"").trim()||"Unknown Client";return{id:e.id||"temp-".concat(Date.now(),"-").concat(Math.random()),clientId:e.client_id,clientName:o,clientEmail:e.client_email||e.email||"",addedAt:e.added_at?new Date(e.added_at):new Date,notes:e.notes||""}}),a=e.entries_count||t||e.total_entries||0;return console.log("Total clients from API:",e.entries_count),console.log("Clients processed count:",t),console.log("Final total clients in useEffect:",a),{...e,id:e.id,date:e.log_date?new Date(e.log_date):new Date,closedAt:e.closed_at?new Date(e.closed_at):void 0,isClosed:!!e.closed_at,clients:r||[],totalClients:a,createdBy:e.created_by||"System"}})}catch(e){console.error("Failed to fetch client logs:",e)}try{console.log("Fetching order logs...");let t=await n.Z_.getAll();if(console.log("Raw order logs response:",t),!t||!t.data)throw Error("Invalid order logs response: missing data");for(let r of(o=[],t.data))try{console.log("Fetching detailed data for order log ID: ".concat(r.id));let t=await A(r.id);if(t){var e;o.push(t),console.log("Successfully processed log ".concat(r.id," with ").concat((null===(e=t.orders)||void 0===e?void 0:e.length)||0," orders"))}else{console.error("Failed to get detailed data for log ".concat(r.id));let e={...r,id:r.id,date:r.log_date?new Date(r.log_date):new Date,closedAt:r.closed_at?new Date(r.closed_at):void 0,isClosed:!!r.closed_at,orders:[],totalOrders:r.entries_count||0,totalValue:0,createdBy:r.created_by||"System"};o.push(e)}await new Promise(e=>setTimeout(e,300))}catch(e){console.error("Error processing log ".concat(r.id,":"),e)}console.log("Processed order logs:",o)}catch(e){console.error("Failed to fetch order logs:",e)}c(t),i(o),0===t.length&&0===o.length&&m("Failed to fetch logs. Please check server connection.")}catch(e){console.error("Failed to fetch logs:",e),m(e.message||"Failed to fetch logs")}finally{u(!1)}})()},[]);let h=async(e,t)=>{try{let o=e.toISOString().split("T")[0],r=await n.mC.create({log_date:o,client_id:t,description:"Daily client log for ".concat(o)});if(console.log("Client log creation response:",r.data),!r.data||!r.data.id)throw Error("Invalid response from server: missing log ID");let a=0,l=r.data.entries||[];console.log("Client log entries:",l);let d=l.map(e=>(console.log("Processing client entry:",e),a++,{id:e.id||"temp-".concat(Date.now()),clientId:e.client_id,clientName:e.client_name||"".concat(e.first_name||""," ").concat(e.last_name||"").trim(),clientEmail:e.client_email,addedAt:e.added_at?new Date(e.added_at):new Date,notes:e.notes||""}));console.log("Processed client entries:",d);let s=r.data.entries_count||a||1;console.log("Final total clients:",s);let i={...r.data,date:new Date(o),clients:d,totalClients:s,isClosed:!1};return console.log("New client log created:",i),c(e=>[...e,i]),i.id}catch(e){throw console.error("Failed to create client log:",e),e}},w=async(e,t,o)=>{try{let r=await n.mC.update(e,{action:"addClient",clientId:t,notes:o,description:o||"Client added to log"});console.log("Add client to log response:",r.data);let a=0,l=r.data.entries||[];console.log("Client log entries in addClientToLog:",l);let d=l.map(e=>{console.log("Processing client entry in addClientToLog:",e),a++;let t=e.client_name||"".concat(e.first_name||""," ").concat(e.last_name||"").trim()||"Unknown Client";return{id:e.id||"temp-".concat(Date.now()),clientId:e.client_id,clientName:t,clientEmail:e.client_email||e.email||"",addedAt:e.added_at?new Date(e.added_at):new Date,notes:e.notes||""}});console.log("Processed client entries in addClientToLog:",d);let s=r.data.entries_count||a||(d.length>0?d.length:1);console.log("Final total clients in addClientToLog:",s);let i={...r.data,date:new Date(r.data.log_date||Date.now()),clients:d,totalClients:s,isClosed:!!r.data.closed_at};return console.log("Updated client log in addClientToLog:",i),c(t=>t.map(t=>t.id===e?i:t)),i}catch(e){throw console.error("Failed to add client to log:",e),e}},y=async e=>{try{let t=await n.mC.update(e,{action:"close"});console.log("Close client log response:",t.data);let o=0,r=t.data.entries||[];console.log("Client log entries in closeClientDailyLog:",r);let a=r.map(e=>{console.log("Processing client entry in closeClientDailyLog:",e),o++;let t=e.client_name||"".concat(e.first_name||""," ").concat(e.last_name||"").trim()||"Unknown Client";return{id:e.id||"temp-".concat(Date.now()),clientId:e.client_id,clientName:t,clientEmail:e.client_email||e.email||"",addedAt:e.added_at?new Date(e.added_at):new Date,notes:e.notes||""}});console.log("Processed client entries in closeClientDailyLog:",a);let d=t.data.entries_count||o||(a.length>0?a.length:1);console.log("Final total clients in closeClientDailyLog:",d);let s={...t.data,date:t.data.log_date?new Date(t.data.log_date):new Date,closedAt:t.data.closed_at?new Date(t.data.closed_at):new Date,isClosed:!0,clients:a,totalClients:d,createdBy:t.data.created_by||"System"};return console.log("Updated client log in closeClientDailyLog:",s),c(t=>t.map(t=>t.id===e?s:t)),l.oR.success("Client daily log for ".concat(s.date.toLocaleDateString()," has been closed successfully"),{position:"top-right",autoClose:3e3}),s}catch(e){throw console.error("Failed to close client log:",e),e}},f=async(e,t)=>{try{console.log("Creating order log for date ".concat(e.toISOString()," with first order ").concat(t));let o=String(t),r=e.toISOString().split("T")[0];console.log("Creating the order log with orders array");let a=await n.Z_.create({log_date:r,description:"Daily order log for ".concat(r),orders:[{order_id:o}]});if(console.log("Order log creation response:",a),!a||!a.data||!a.data.id)throw Error("Invalid response from server: missing log ID");let l=a.data.id;console.log("Log created with ID: ".concat(l)),await new Promise(e=>setTimeout(e,800));let d=await A(l);if(console.log("Fresh log data after creation:",d),!d){console.error("Failed to get fresh log data after creation");let e={...a.data,id:l,date:new Date(r),orders:[],totalOrders:1,totalValue:0,isClosed:!1,createdBy:a.data.created_by||"System"};return i(t=>[e,...t]),l}return i(e=>[d,...e]),d.id}catch(e){throw console.error("Failed to create order log:",e),e}},p=async(e,t,o)=>{try{var r;console.log("Adding order ".concat(t," to log ").concat(e," with notes: ").concat(o||"none"));let a=String(t),l=null,d=0,c=null;for(;!l&&d<3;){d++,console.log("Attempt ".concat(d,"/").concat(3," to add order ").concat(a," to log ").concat(e));try{l=1===d?await n.vY.addOrderToLog({order_log_id:e,order_id:a,notes:o||""}):2===d?await n.vY.addMultipleOrdersToLog({order_log_id:e,entries:[{order_id:a,notes:o||""}]}):await n.Z_.update(e,{action:"addOrder",orderId:a,notes:o||""}),console.log("Attempt ".concat(d," response:"),l),l&&l.data||(console.error("Empty response on attempt ".concat(d)),l=null,d<3&&await new Promise(e=>setTimeout(e,500*d)))}catch(e){c=e,console.error("Error on attempt ".concat(d,":"),e),d<3&&await new Promise(e=>setTimeout(e,500*d))}}if(!l||!l.data)throw Error("Failed to add order ".concat(a," to log after ").concat(3," attempts: ").concat(c?String(c):"Unknown error"));console.log("Add order to log API response:",l),console.log("Add order to log data:",l.data),await new Promise(e=>setTimeout(e,800));let g=await A(e);if(!g)throw console.error("Failed to get fresh log data after adding order"),Error("Failed to refresh log data after adding order");console.log("Fresh log data after adding order:",g),console.log("Orders in fresh log:",(null===(r=g.orders)||void 0===r?void 0:r.length)||0);let u=s.map(t=>t.id===e?g:t);return i(u),g}catch(o){throw console.error("Error adding order ".concat(t," to log ").concat(e,":"),o),o}},D=async e=>{try{console.log("Closing order log ".concat(e));let t=await n.Z_.update(e,{action:"close"});if(console.log("Close order log response:",t.data),!t.data)throw Error("Failed to close log, empty response");let o=await A(e);if(!o){console.error("Failed to get fresh log data after closing");let o=t.data,r={...o,id:o.id,date:o.log_date?new Date(o.log_date):new Date,closedAt:o.closed_at?new Date(o.closed_at):new Date,isClosed:!0,orders:[],totalOrders:o.entries_count||0,totalValue:0,createdBy:o.created_by||"System"},a=s.map(t=>t.id===e?r:t);return i(a),l.oR.success("Order daily log for ".concat(r.date.toLocaleDateString()," has been closed successfully"),{position:"top-right",autoClose:3e3}),r}let r={...o,isClosed:!0,closedAt:o.closed_at?new Date(o.closed_at):new Date},a=s.map(t=>t.id===e?r:t);return i(a),l.oR.success("Order daily log for ".concat(r.date.toLocaleDateString()," has been closed successfully"),{position:"top-right",autoClose:3e3}),r}catch(t){throw console.error("Error closing order log ".concat(e,":"),t),t}},C=async e=>{try{console.log("Fetching detailed data for client log ID: ".concat(e));let t=await n.mC.getById(e);if(!t.data)return console.error("No data returned from client log API"),null;console.log("Log detail response:",t.data);let o=t.data,r=0,a=o.entries||[];if(console.log("Log entries in getLogById:",a),console.log("Original entries count:",a.length),console.log("Entries count from API:",o.entries_count),0===a.length&&(o.entries_count>0||o.total_entries>0)){console.log("Entries array is empty but count indicates clients exist - creating placeholders");let e=o.entries_count||o.total_entries||0;a=Array.from({length:e},(e,t)=>({id:"placeholder-detail-".concat(o.id,"-").concat(t),client_id:"unknown-".concat(t),client_name:"Unknown Client",client_email:"",added_at:new Date,notes:"Client data not fully loaded"}))}let l=a.map(e=>{console.log("Processing client entry in getLogById:",e),r++;let t=e.client_name||"".concat(e.first_name||""," ").concat(e.last_name||"").trim()||"Unknown Client";return{id:e.id||"temp-detail-".concat(Date.now(),"-").concat(Math.random()),clientId:e.client_id,clientName:t,clientEmail:e.client_email||e.email||"",addedAt:e.added_at?new Date(e.added_at):new Date,notes:e.notes||""}}),d=o.entries_count||r||o.total_entries||0;console.log("Total clients from API:",o.entries_count),console.log("Clients processed count:",r),console.log("Final total clients in getLogById:",d);let c={...o,id:o.id,date:o.log_date?new Date(o.log_date):new Date,closedAt:o.closed_at?new Date(o.closed_at):void 0,isClosed:!!o.closed_at,clients:l,totalClients:d,createdBy:o.created_by||"System"};return console.log("Formatted log data in getLogById:",c),c}catch(e){return console.error("Error fetching log by ID:",e),null}},A=async e=>{try{console.log("Fetching detailed data for order log ID: ".concat(e));let t=await n.Z_.getById(e);if(!t||!t.data)return console.error("No data returned from order log API"),null;console.log("Order log detail API response:",t),console.log("Order log detail data:",t.data);let o=t.data,r=0,a=0,l=[];if(Array.isArray(o.entries))console.log("Found entries array in standard location"),l=o.entries;else if(o.data&&Array.isArray(o.data.entries))console.log("Found entries array in data.entries"),l=o.data.entries;else if(Array.isArray(o.orders))console.log("Found orders array instead of entries"),l=o.orders.map(e=>({id:"entry-".concat(Date.now(),"-").concat(Math.random()),order_id:e.id,order:e}));else{console.log("No entries found in log response, fetching separately");try{let t=await n.vY.getByLogId(e);t&&t.data&&Array.isArray(t.data)?(console.log("Successfully fetched entries separately:",t.data),l=t.data):(console.warn("Failed to fetch entries separately, using empty array"),l=[])}catch(e){console.error("Error fetching entries separately:",e),l=[]}}if(console.log("Order log entries in getOrderLogById:",l),console.log("Original entries count:",l.length),console.log("Entries count from API:",o.entries_count||o.orders_count||"not provided"),l.length>0&&(l[0].order&&"object"==typeof l[0].order?(console.log("Entries contain full order objects, extracting order data"),l=l.map(e=>{let t=e.order;return{id:e.id||"entry-id-".concat(Date.now(),"-").concat(Math.random()),order_id:t.id,order_number:t.order_number||"ORD-".concat(t.id.substring(0,8)),client_name:t.client_name||(t.client?t.client.name:"Unknown Client"),order_total:parseFloat(t.total)||0,added_at:e.added_at||e.addedAt||new Date,notes:e.notes||""}}),console.log("Extracted order entries:",l)):(console.log("Entries exist but no nested order objects, checking structure..."),l=l.map(e=>({id:e.id||"entry-id-".concat(Date.now(),"-").concat(Math.random()),order_id:e.order_id||e.orderId,order_number:e.order_number||e.orderNumber||"ORD-".concat((e.order_id||e.orderId||"").substring(0,8)),client_name:e.client_name||e.clientName||"Unknown Client",order_total:parseFloat(e.order_total||e.orderTotal)||0,added_at:e.added_at||e.addedAt,notes:e.notes||""})),console.log("Normalized entries:",l))),0===l.length&&(o.entries_count>0||o.total_orders>0)){console.log("Entries array is empty but count indicates orders exist - creating placeholders");let e=o.entries_count||o.total_orders||0;l=Array.from({length:e},(e,t)=>({id:"placeholder-order-".concat(o.id,"-").concat(t),order_id:"unknown-".concat(t),order_number:"Unknown Order",client_name:"Unknown Client",order_total:0,added_at:new Date,notes:"Order data not fully loaded"}))}let d=l.map(e=>{console.log("Processing order entry in getOrderLogById:",e),a++,e.order_total&&(r+=parseFloat(e.order_total));let t=e.order_id||"unknown-".concat(Date.now(),"-").concat(Math.random().toString(36).substring(2,11));return{id:e.id||"temp-order-".concat(Date.now(),"-").concat(Math.random()),orderId:t,orderNumber:e.order_number||"ORD-".concat(t.substring(0,8)),clientName:e.client_name||"Unknown client",orderTotal:e.order_total?parseFloat(e.order_total):0,addedAt:e.added_at?new Date(e.added_at):new Date,notes:e.notes||""}}),c=o.entries_count||a||o.total_orders||0;console.log("Total orders from API:",o.entries_count),console.log("Orders processed count:",a),console.log("Final total orders in getOrderLogById:",c),console.log("Total value calculated:",r);let s={...o,id:o.id,date:o.log_date?new Date(o.log_date):new Date,closedAt:o.closed_at?new Date(o.closed_at):void 0,isClosed:!!o.closed_at,orders:d,totalOrders:c,totalValue:r,createdBy:o.created_by||"System"};return console.log("Formatted order log data in getOrderLogById:",s),Array.isArray(s.orders)||(s.orders=[]),s}catch(e){return console.error("Error fetching order log by ID:",e),null}},E=async()=>{try{u(!0),console.log("Manually refreshing order logs...");let o=await n.Z_.getAll();if(console.log("Refresh order logs response:",o),!o||!o.data)throw Error("Invalid response when refreshing order logs");let r=Array.isArray(o.data)?o.data:o.data.data&&Array.isArray(o.data.data)?o.data.data:[];if(0===r.length)return console.warn("No logs found to refresh"),[];let a=[];for(let o of r){try{var e,t;console.log("Refreshing detailed data for log ".concat(o.id));let r=null,n=0;for(;!r&&n<3;){n++,console.log("Attempt ".concat(n,"/").concat(3," to fetch log ").concat(o.id));try{if(r=await A(o.id)){let t=r.totalOrders||0,a=(null===(e=r.orders)||void 0===e?void 0:e.length)||0;a<t&&n<3?(console.log("Missing orders: expected ".concat(t,", got ").concat(a,". Retrying...")),r=null,await new Promise(e=>setTimeout(e,500))):console.log("Log ".concat(o.id," has ").concat(a,"/").concat(t," orders after ").concat(n," attempt(s)"))}}catch(e){console.error("Error in attempt ".concat(n," for log ").concat(o.id,":"),e),await new Promise(e=>setTimeout(e,500))}}r?(console.log("Successfully refreshed log ".concat(o.id," with ").concat((null===(t=r.orders)||void 0===t?void 0:t.length)||0," orders")),a.push(r)):console.error("Failed to refresh log ".concat(o.id," after ").concat(3," attempts"))}catch(e){console.error("Error refreshing log ".concat(o.id,":"),e)}await new Promise(e=>setTimeout(e,300))}return console.log("Successfully refreshed ".concat(a.length," of ").concat(r.length," logs")),i(a),a}catch(e){return console.error("Error refreshing order logs:",e),[]}finally{u(!1)}},I=async function(e,t){let o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[];try{var r;console.log("Adding ".concat(t.length," orders to log ").concat(e));let a=new Set;try{console.log("Attempting batch add with orderLogEntryApi.addMultipleOrdersToLog");let r=t.map((e,t)=>({order_id:String(e),notes:o[t]||""})),l=await n.vY.addMultipleOrdersToLog({order_log_id:e,entries:r});if(console.log("Batch add response:",l),!l||!l.data)throw Error("Empty response from batch add");t.forEach(e=>a.add(String(e))),console.log("All orders added successfully via batch add")}catch(r){console.error("Batch add failed:",r),console.log("Falling back to adding orders one by one");for(let r=0;r<t.length;r++){let n=String(t[r]);if(a.has(n)){console.log("Order ".concat(r+1,"/").concat(t.length,": ").concat(n," already added, skipping"));continue}let l=o[r]||"";console.log("Adding order ".concat(r+1,"/").concat(t.length,": ").concat(n)),r>0&&await new Promise(e=>setTimeout(e,1e3));try{await p(e,n,l),console.log("Successfully added order ".concat(r+1)),a.add(n)}catch(e){console.error("Error adding order ".concat(n,":"),e)}}}if(0===a.size)throw Error("Failed to add any orders to the log");await new Promise(e=>setTimeout(e,1e3));let l=await A(e);if(!l)throw console.error("Failed to get fresh log data after adding orders"),Error("Failed to refresh log data after adding orders");console.log("Fresh log data after adding orders:",l),console.log("Orders in fresh log:",(null===(r=l.orders)||void 0===r?void 0:r.length)||0),console.log("Successfully added orders:",a.size);let d=s.map(t=>t.id===e?l:t);return i(d),l}catch(t){throw console.error("Error adding multiple orders to log ".concat(e,":"),t),t}};return(0,r.jsx)(d.Provider,{value:{clientLogs:o,orderLogs:s,loading:g,error:_,createClientDailyLog:h,addClientToLog:w,closeClientDailyLog:y,createOrderDailyLog:f,addOrderToLog:p,closeOrderDailyLog:D,getLogById:C,getOrderLogById:A,refreshOrderLogs:E,addMultipleOrdersToLog:I},children:t})}function s(){let e=(0,a.useContext)(d);if(void 0===e)throw Error("useDailyLogs must be used within a DailyLogsProvider");return e}}}]);